#!/usr/bin/env bash
set -euo pipefail

# ---- Config you can override via env ----
ANSIBLE_REPO="${ANSIBLE_REPO:-git@github.com:minaboktor2628/dotfiles.git}"
BRANCH="${BRANCH:-main}"
PLAYBOOK="${PLAYBOOK:-.config/ansible/local.yml}"
DEST_DIR="${DEST_DIR:-/home/ansible/.local/share/ansible-pull}"
AUTOMATION_USER="${AUTOMATION_USER:-ansible}"
CRON_SCHEDULE="${CRON_SCHEDULE:-*/30 * * * *}"   # every 30 minutes
EXTRA_VARS="${EXTRA_VARS:-user=$AUTOMATION_USER}"

# =========================
# Helpers
# =========================
pm=""
if command -v apt-get >/dev/null 2>&1; then pm="apt"
elif command -v dnf >/dev/null 2>&1; then pm="dnf"
elif command -v yum >/dev/null 2>&1; then pm="yum"
elif command -v pacman >/dev/null 2>&1; then pm="pacman"
elif command -v brew >/dev/null 2>&1; then pm="brew"
fi

require_root() {
  if [ "${EUID:-$(id -u)}" -ne 0 ]; then
    echo "This bootstrap will escalate via sudo as needed..."
    if ! command -v sudo >/dev/null 2>&1; then
      echo "sudo not found; attempting to install minimal prerequisites as root required." >&2
    fi
  fi
}

sudo_do() { sudo -H bash -c "$*"; }

# =========================
# Prereqs: git/curl/python
# =========================
require_root
case "$pm" in
  apt)
    sudo_do "apt-get update -y"
    sudo_do "apt-get install -y git curl tar python3 python3-pip python3-venv ca-certificates"
    ;;
  dnf|yum)
    sudo_do "$pm install -y git curl tar python3 python3-pip ca-certificates"
    ;;
  pacman)
    sudo_do "pacman -Sy --noconfirm git curl tar python python-pip ca-certificates"
    ;;
  brew)
    brew update
    brew install git curl python || true
    ;
  *
    echo "Unsupported OS: install git, curl, python3 manually and re-run." >&
    exit 1
    ;;
esac
# =========================
# Ensure Ansible
# =========================
if ! command -v ansible >/dev/null 2>&1 || ! command -v ansible-pull >/dev/null 2>&1; then
  case "$pm" in
    apt)    sudo_do "apt-get install -y ansible" ;;
    dnf|yum) sudo_do "$pm install -y ansible" ;;
    pacman) sudo_do "pacman -Sy --noconfirm ansible" ;;
    brew)   brew install ansible || true ;;
    *)
      # Fallback: venv
      sudo_do "python3 -m venv /opt/ansible-venv"
      sudo_do "/opt/ansible-venv/bin/pip install --upgrade pip ansible"
      export PATH="/opt/ansible-venv/bin:$PATH"
      ;;
  esac
fi

# =========================
# Create automation user
# =========================
# Figure out the sudo group name on this distro
SUDO_GROUP="sudo"
if getent group wheel >/dev/null 2>&1; then
  SUDO_GROUP="wheel"
elif getent group sudo >/dev/null 2>&1; then
  SUDO_GROUP="sudo"
fi

if ! id -u "$AUTOMATION_USER" >/dev/null 2>&1; then
  sudo_do "useradd -m -s /bin/bash $AUTOMATION_USER"
fi

# Ensure home exists with correct ownership (in case user existed without home)
sudo_do "mkdir -p /home/$AUTOMATION_USER && chown -R $UTOMATION_USER:$AUTOMATION_USER /home/$AUTOMATION_USER"

# Add to sudo/wheel
if ! id -nG "$AUTOMATION_USER" | grep -qw "$SUDO_GROUP"; then
  sudo_do "usermod -aG $SUDO_GROUP $AUTOMATION_USER"
fi

# Passwordless sudo for this user (adjust if you prefer password)
if [ ! -f "/etc/sudoers.d/$AUTOMATION_USER" ]; then
  sudo_do "printf '%s ALL=(ALL) NOPASSWD:ALL\n' '$AUTOMATION_USER' > /etc/sudoers.d/$AUTOMATION_USER"
  sudo_do "chmod 0440 /etc/sudoers.d/$AUTOMATION_USER"
fi

# =========================
# ansible-pull cron job
# =========================
# Use /etc/cron.d for idempotency (no clobbering user crontab)
CRON_FILE="/etc/cron.d/ansible-pull"
ANSIBLE_PULL_BIN="$(command -v ansible-pull || echo /usr/bin/ansible-pull)"
CRON_LINE="$CRON_SCHEDULE $AUTOMATION_USER PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin:/sbin $ANSIBLE_PULL_BIN -U $ANSIBLE_REPO -C $BRANCH -d $DEST_DIR $PLAYBOOK --extra-vars \"$EXTRA_VARS\" >> /var/log/ansible-pull.log 2>&1"

if [ ! -f "$CRON_FILE" ] || ! sudo grep -Fq "$ANSIBLE_REPO" "$CRON_FILE"; then
  sudo_do "printf '# Managed by yadm bootstrap\n%s\n' \"$CRON_LINE\" > '$CRON_FILE'"
  sudo_do "chmod 0644 '$CRON_FILE'"
fi

# Create log file and allow user to read it
sudo_do "touch /var/log/ansible-pull.log && chown $AUTOMATION_USER:$AUTOMATION_USER /var/log/ansible-pull.log || true"

# Ensure destination dir exists and is writable by the automation user
sudo_do "mkdir -p '$DEST_DIR' && chown -R $AUTOMATION_USER:$AUTOMATION_USER '$(dirname "$DEST_DIR")'"

# =========================
# First run now (as the automation user)
# =========================
sudo_do "runuser -l $AUTOMATION_USER -c '$ANSIBLE_PULL_BIN -U $ANSIBLE_REPO -C $BRANCH -d $DEST_DIR $PLAYBOOK --extra-vars \"$EXTRA_VARS\"'"

echo "Bootstrap complete. $AUTOMATION_USER will keep pulling $ANSIBLE_REPO via cron: $CRON_SCHEDULE"
